p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(qplot)
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
title: "Markdown Test"
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
setwd("C:/R/RRP1")
ls
data <- read.csv("activity.csv")
data <- read.csv("activity.csv")
read.csv("activity.csv)")
read.csv("activity.csv")
setwd("./RepData_PeerAssessment1")
data <- read.csv("activity.csv")
head(data)
data
head(data)
library(dplyr)
data <- read.csv("activity.csv")
data <- tbl_df(data)
data
totalPerDay <- data %>%
group_by(data) %>%
summarise(steps = sum(steps))
data <- read.csv("activity.csv")
totalPerDay <- data %>%
group_by(data) %>%
summarise(steps = sum(steps))
totalPerDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps))
totalPerDay
totalPerDay <- data[complete.cases(data), ]
totalPerDay
totalPerDay <- totalPerDay %>%
group_by(date) %>%
summarise(steps = sum(steps))
totalPerDay
hist(totalPerDay)
hist(totalPerDay, x = date)
hist(.leap.seconds, "years", freq = TRUE)
hist(.leap.seconds, "days", freq = TRUE)
hist(totalPerDay, "days", freq = TRUE)
totalPerDay <- mutate(totalPerDay, date = as.Date(date))
totalPerDay
hist(totalPerDay, "days", freq = TRUE)
hist(totalPerDay$date, "days", freq = TRUE)
hist(totalPerDay$date)
hist(totalPerDay$date, "days")
hist(totalPerDay$date, totalPerDay$steps, "days")
hist(totalPerDay$date, "days", )
hist(totalPerDay$date, "days" )
hist(totalPerDay$steps, "days" )
hist(totalPerDay$steps)
data <- read.csv("activity.csv")
data <- tbl_df(data)
data <- data[complete.cases(data), ]
data
hist(totalPerDay$steps, main = "Total Steps Taken Each Day")
hist(totalPerDay$steps, main = "Total Steps Taken Each Day", xlab = "Number Of Steps")
hist(totalPerDay$steps, main = "Total Steps Taken Each Day", xlab = "Number Of Steps", ylab = "Frequency Of Days")
hist(totalPerDay$steps, main = "Total Steps Taken Each Day", xlab = "Number Of Steps", ylab = "Frequency of Days")
summarise(totalPerDay)
totalPerDay
summarise(totalPerDay$steps)
summary(totalPerDayPerDay)
summary(totalPerDay)
mean(totalPerDay)
mean(totalPerDay$steps)
median(totalPerDay$steps)
data
data <- data[complete.cases(data), ]
avg =  totalPerDay %>%
group_by(interval) %>%
summarise(steps = avg(steps))
avg =  data %>%
group_by(interval) %>%
summarise(steps = avg(steps))
avg =  data %>%
group_by(interval) %>%
summarise(steps = mean(steps))
avg
plot(avg, x = avg$interval, y = avg$steps, type="l")
plot (avg, type="l")
```{r}
avg =  data %>%
group_by(interval) %>%
summarise(steps = mean(steps))
plot (avg, type="l")
```
max(avg$steps)
maxInterval <- select(avg, avg$stes == max(avg$steps))
maxInterval <- select(avg, avg$stes = max(avg$steps))
maxInterval <- select(avg, avg$stes == max(avg$steps))
maxInterval <- subset(avg, avg$steps == max(avg$steps))
maxInterval
avg[835]
avg[835,]
abg
avg
plot (avg, type="l")
library(calibrate)
install.packages("calibrate")
library(calibrate)
textxy(X = maxInterval$interval, Y = maxInterval$steps)
textxy(X = maxInterval$interval, Y = maxInterval$steps, labs="max")
textxy(X = maxInterval$interval, Y = maxInterval$steps, labs="Maximum Number of steps")
plot (avg, type="l", axis=FALSE)
plot (avg, type="l")
axis(1, xaxp=avg$interval)
axis(1, at=avg$interval)
avg =  data %>%
summarise(steps = mean(steps))
avg
avg =  data %>%
group_by(interval) %>%
summarise(steps = mean(steps))
plot (avg, type="l")
axis(1, at = seq(min(avg$interval), max(avg$interval), by = 5), las=2)
plot (avg, type="l")
axis(1, at = seq(min(avg$interval), max(avg$interval), by = 5))
plot (avg, type="l")
axis(1, at = seq(min(avg$interval), max(avg$interval), by = 5), las=2)
textxy(X = maxInterval$interval, Y = maxInterval$steps, col="red")
plot (avg, type="l")
textxy(X = maxInterval$interval, Y = maxInterval$steps, labs="Maximum Number of steps", col="red")
length(data)
rows(data)
nrow(data)
nrow(data) - nrow(data[complete.cases(data), ])
nrow(data[complete.cases(data), ])
data <- read.csv("activity.csv")
data <- tbl_df(data)
nrow(data[complete.cases(data), ])
nrow(data)
nrow(data) - nrow(data[complete.cases(data), ])
data
avg =  avg %>%
group_by(interval) %>%
summarise(steps = mean(steps))
avg
avg =  data %>%
group_by(interval, date) %>%
summarise(steps = mean(steps))
avg
avg <- data[complete.cases(data), ]
avg =  data %>%
group_by(interval, date) %>%
summarise(steps = mean(steps))
avg
avg =  avg %>%
group_by(interval, date) %>%
summarise(steps = mean(steps))
avg
avg <- data[complete.cases(data), ]
avg
avg =  avg %>%
group_by(interval, date) %>%
summarise(steps = mean(steps))
avg
avg =  data %>%
group_by(interval, date) %>%
summarise(steps = mean(steps))
data
data[2012-10-01, ]
data[data$date == 2012-10-01, ]
data[data$date == "2012-10-01", ]
data[data$date == "2012-10-01", ]$steps
avgByDate <- data avg %>%
group_by(date) %>%
summarise(steps = mean(steps))
avgByDate <- data %>%
group_by(date) %>%
summarise(steps = mean(steps))
avgByDate
mean(avgByDate$steps)
avgByDate <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps))
avgByDate
data
avg <- data[complete.cases(data), ]
avg =  avg %>%
group_by(interval) %>%
summarise(steps = mean(steps))
avg
nas <- data[!complete.cases(data), ]
nas
nas <- mutate(nas, steps = avg[interval == nas$interval, ])
tmp <- data
nas
nas$interval
nas
avg
avg[avg$interval == 0, ]
f <- function(x, avg) {
x$steps = avg[avg$interval == x$interval, ]$steps
}
apply(nas, 1, f, avg = avg)
lapply(nas, 1, f, avg = avg)
nas
avg
f <- function(x, avg) {
x[$steps]1] = avg[avg$interval == x$interval, ][2]
}
f <- function(x, avg) {
x[1] = avg[avg$interval == x$interval, ][2]
}
apply(nas, 1, f, avg = avg)
nas
f <- function(x, avg) {
x[1] = avg[avg$interval == x[3] , ][2]
}
apply(nas, 1, f, avg = avg)
nas
nas <- apply(nas, 1, f, avg = avg)
nas
f <- function(x, avg) {
x[1] <- avg[avg$interval == x[3] , ][2]
}
lapply(x, f)
lapply(nas, f)
lapply(nas, FUN = f(avg))
lapply(nas, FUN = f(avg = avg))
f <- function(x) {
x[1] <- avg[avg$interval == x[3] , ][2]
}
lapply(nas, FUN = f)
f <- function(x) {
x$steps <- avg[avg$interval == x$interval] , ]$steps
}
f <- function(x) {
x$steps <- avg[avg$interval == x$interval, ]$steps
}
lapply(nas, FUN = f)
f <- function(x) {
x
}
lapply(nas, FUN = f)
library(plyr)
ddply(.data = nas, .fun = f)
f <- function(x) {
x
}
ddply(nas, f)
ddply(.data = nas, f)
ddply(.data = nas, .fun = f)
nas
nas
for(i in : nas$interval)
for(i in nas$interval)
i
for(i in nas$interval) i
for(i in nas$interval) {}
nas
nas <- data[!complete.cases(data), ]
nas
nas[,, 0]
nas[nas$interval == 0]
nas[nas$interval == 0, ]
tmp <- nas
nas[nas$interval == 0] = 4
nas[nas$interval == 0, ] = 4
nas[nas$interval == 0, ]$steps = 4
nas
nas[nas$interval == 0, ]$steps = rep(length(nas$interval), 4)
nas
rep(length(nas$interval), 4)
nas[nas$interval == 0, ]$steps = rep(nrows(nas$interval), 4)
nas[nas$interval == 0, ]$steps = rep(nrow(nas$interval), 4)
nas
nas[nas$interval == 5, ]$steps = rep(nrow(nas$interval), 4)
avg
tmp <- data
tmp
tmp <- merge(data, avg, on =interval)
tmp
head(tmp)
names(avg)
names(avg) <- c("interval","avgSteps")
names(avg)
tmp <- data
tmp <- merge(data, avg, on =interval)
head(tmp)
names(avg) <- c("interval","avgSteps")
tmp <- data
tmp <- merge(data, avg, on =interval)
for(d : tmp)
{
if(is.na(d$steps)) {
d$steps = d$avgSteps
}
}
for(d in tmp)
{
if(is.na(d$steps)) {
d$steps = d$avgSteps
}
}
f <- function(d) {
if(is.na(d$steps)) {
d$steps = d$avgSteps
}
lapply(tmp, FUN = f)
head(tmp)
?
)
head(tmp)
lapply(tmp, FUN = f)
head(tmp)
apply(tmp, FUN = f)
apply(tmp, f)
f
f <- function(d) {
if(is.na(d$steps)) {
d$steps = d$avgSteps
}
}
f
lapply(tmp, FUN = f)
apply(tmp, FUN = f)
tmp[["interval"]]
f <- function(d) {
if(is.na(d[["steps"]])) {
d[["steps"]] = d[["avgSteps"]]
}
}
f
lapply(tmp, FUN = f)
f <- function(d) {
if(is.na(d["steps"])) {
d["steps"] = d["avgSteps"]
}
}
lapply(tmp, FUN = f)
head(tmp)
f <- function(d) {
d[0]
}
lapply(tmp, FUN = f)
f
lapply(tmp, FUN = f)
head(tmp)
f <- function(d) {
d[1]
}
f
lapply(tmp, FUN = f)
head(tmp)
f <- function(d) {
if(is.na(d[2])) {
d[2] = d[4]
}
}
lapply(tmp, FUN = f)
head(tmp)
koko <- lapply(tmp, FUN = f)
head(koko)
ddply(.data = tmp, .fun = f)
koko <- tmp %>%
mutate(steps = is.na(steps), avgSteps,
ifelse(!is.na(steps), steps)))
koko <- tmp %>%
mutate(steps = is.na(steps), avgSteps,
ifelse(!is.na(steps), steps))
koko
head(koko)
koko <- tmp %>%
mutate(steps = ifelse(is.na(steps), avgSteps),
ifelse(!is.na(steps), steps))
koko <- tmp %>%
mutate(steps = ifelse(is.na(steps), avgSteps,
ifelse(!is.na(steps), steps)))
koko <- tmp %>%
mutate(steps = ifelse(is.na(steps)), avgSteps, steps))
koko <- tmp %>%
mutate(steps = ifelse(is.na(steps)), avgSteps, steps))
koko <- tmp %>%
mutate(steps = ifelse(is.na(steps)), avgSteps, steps)
koko <- tmp %>%
mutate(steps = ifelse(is.na(steps), avgSteps, steps))
head(koko)
head(data)
newData <- select(tmp, steps, date, interval)
newData <- select_(tmp, steps, date, interval)
newData <- select(tmp, steps, date, interval)
newData <- select(tmp, steps:interval)
select(tmp, steps:interval)
select(tmp)
select(tmp, choices = steps:interval)
tmp <- tbl_df(tmp)
newData <- select(tmp, steps:interval)
newData <- dplyr::select(tmp, steps:interval)
newdata
newData
tmp
names(avg) <- c("interval","avgSteps")
tmp <- data
tmp <- merge(data, avg, on =interval)
tmp <- tmp %>%
mutate(steps = ifelse(is.na(steps), avgSteps, steps))
head(tmp)
newData <- dplyr::select(tmp, steps, date, interval)
newData
head(newData)
factored <- data
factored$weekday <- weekdays(factored$date)
factored$weekday <- factor(weekdays(factored$date))
factored$weekday <-  factor(weekdays(factored$date),
levels=1:2, labels=c('weekend', 'weekday'))
library(chron)
factored$weekday <-  chron::is.weekend(factored$date)
factored
weekdays(2012-10-01)
factored <- data
factored$daytype <-  ifelse(chron::is.weekend(factored$date), "weekend", "weekday")
factored
plot(factored, type="l", factorfac)
plot(factored, type="l", factor=factored$daytype)
library(lattice)
avg =  factored %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
xyplot(avg~interval | daytype, data = avg,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
avg
factored
avg =  factored %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
avg <- factored[complete.cases(factored), ]
avg =  avg %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
avg <- factored[complete.cases(factored), ]
avg
avg =  avg %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
avg <- factored[complete.cases(factored), ]
avg =  avg %>%
group_by(daytype) %>%
summarise(steps = mean(steps))
avg
avg
avg <- factored[complete.cases(factored), ]
avg <-  avg %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
rm(list=ls(all=TRUE))
avg
library(dplyr)
data <- read.csv("activity.csv")
factored <- data
factored$daytype <-  ifelse(chron::is.weekend(factored$date), "weekend", "weekday")
avg <- factored[complete.cases(factored), ]
avg <-  avg %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
factored
avg <- factored[complete.cases(factored), ]
avg <- tbl_df(factored[complete.cases(factored), ])
avg <-  avg %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
avg <- tbl_df(factored[complete.cases(factored), ])
avg <-  avg %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
avg <- data[complete.cases(data), ]
avg =  avg %>%
group_by(interval) %>%
summarise(steps = mean(steps))
avg
avg <- data[complete.cases(data), ]
avg
avg =  avg %>%
group_by(interval) %>%
summarise(steps = mean(steps))
avg

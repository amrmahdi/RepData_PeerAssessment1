library(datasets)
data(iris)
library(datasets)
?iris
Sepal.Length
virginica
isis
iris
x <- iris
x
x =  x[ which(Species =='virginica'),]
x <- subset(x, Species = virginica)
x
x <- subset(x, Species == virginica)
x <- subset(x, Species == "virginica")
x
x <- subset(x, select Sepal.Length)
x <- subset(x, select=Sepal.Length)
x
lapply(x, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
a<- tapply(mtcars$hp, mtcars$cyl, mean)
a
a[0]
a[4]
class(a)
a[0][0]
a$4
a
unclass(a)
a[1]
a[1][0]
a[1]
class(a[1])
abs(1-5)
abs(a[1] - a[3])
debug(ls)
debug(ls)
ls
debug(ls)
g
ls("amr")
ls(amr)
debug(ls)
ls("amr")
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
setwd("C\\R\\week4")
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
library(RMySQL)
dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ussc.edu")
dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
u <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(u, "show databases;");
result
dbDisconnect(u)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/baa")
h5ls("example.h5")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "d8fc176efc5be3370702eb5c1c591e52ab8c4b99")
myapp <- oauth_app("github", "ce65883f8b3ac2600fe0", secret="35c9ae6dddc564027c6d5845700169afdcca6996")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
g
library(httpuv)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github", "ce65883f8b3ac2600fe0", secret="35c9ae6dddc564027c6d5845700169afdcca6996")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
app <- oauth_app("github", "ce65883f8b3ac2600fe0", secret="35c9ae6dddc564027c6d5845700169afdcca6996")
github_token <- oauth2.0_token(oauth_endpoints("github"), app)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ce65883f8b3ac2600fe0", secret="35c9ae6dddc564027c6d5845700169afdcca6996")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
getwd()
oauth_endpoints("github")
myapp <- oauth_app("github", "ce65883f8b3ac2600fe0", secret="35c9ae6dddc564027c6d5845700169afdcca6996")
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors=F)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydy)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
>tbl_df
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu" )
is.na(c(3, 5, NA, 10)
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version) )
select(cran, size:ip_id)
cran <- select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
library(tidyr)
students
?gather
gather(studenta, sex, count, -grade)
gather(students, sex, count, -grade)
quit
exit
exit
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
d <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "d.csv")
d <- read.csv("d.csv")
names(d)
x <- strsplit(names(d), "wgtp")
x[123]
d <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "d.csv")
d <- read.csv("d.csv", SkipLines=4)
d <- read.csv("d.csv", Skiplines=4)
d <- read.csv("d.csv", skip=4)
d
head(d)
d <- select(d, c(5))
library(dplyr)
d <- select(d, c(5))
d
d <- mutate(d, X.4 = gsub(",", "", X.4)
)
d
mean(d)
summarise(d, mean)
>summarise()
?summarise()
d <- d %>%
summarise_each(funs(mean))
d
d <- read.csv("d.csv", skip=4)
d <- select(d, c(5))
d <- mutate(d, X.4 = gsub(",", "", X.4))
d <- mutate(d, X.4 = as.numeric(X.4))
d
d <- d[!is.na(d)]
d
d <- as.vector(d)
d
mean(d)
a <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "a.csv")
a <- read.csv("a.csv", skip=4)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "b.csv")
b <- read.csv("b.csv")
b <- tbl_df(b)
b
names(b)
a
a <- select(a, c(1,2, 4, 5))
a <- tbl_df(a)
a
names(a) <- c("CountryCode", "Rank", "Name", "GDB")
names(a)
a
c <- inner_join(a, b)
a
c
c <- mutate(c, Rank=as.numeric(Rank))
c$Rank
c
s <- c$Special.Notes
s
s <- as.vector(s)
grebl("Fiscal year end: June", s)
grepl(pattern = "Fiscal year end: June", s, ignore.case = TRUE)
greb("Fiscal year end: June", s)
grep(pattern = "Fiscal year end: June", s, ignore.case = TRUE)
length(grep(pattern = "Fiscal year end: June", s, ignore.case = TRUE))
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
install.packages(lubridate)
install.packages("lubridate");
library(lubridate)
names(sampleTimes)
y(sampleTimes[0])
s <- dmy(sampleTimes)
s
sampleTimes[0]
sampleTimes[[0]]
s <- as.vector(sampleTimes)
s
s[0]
sampleTimes
class(sampleTimes)
s <- as.Date(sampleTimes, "%Y")
s
s[1]
s <- s[format(s, "%Y") == "2012"]
s
length(s)
weekdays(s)
c <- weekdays(s)
c <- c[c == "Monday"]
c
length(c)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
weights
Diet
?nlme
?lattice
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(qplot)
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
getwd()
setwd("C:/R/RRP1/RepData_PeerAssessment1")
library(dplyr)
data <- read.csv("activity.csv")
data <- tbl_df(data)
factored <- data
factored$daytype <-  ifelse(chron::is.weekend(factored$date), "weekend", "weekday")
avg <- tbl_df(factored[complete.cases(factored), ])
avg <-  avg %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
avg
xyplot(steps~interval | daytype, data = avg,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
library(lattice)
xyplot(steps~interval | daytype, data = avg,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
